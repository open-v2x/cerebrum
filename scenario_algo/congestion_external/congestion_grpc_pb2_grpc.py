#   Copyright 99Cloud, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc # type: ignore

from . import congestion_grpc_pb2 as congestion__grpc__pb2


class CongestionGrpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel): # noqa
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.congestion = channel.unary_unary(
            "/congestion_grpc.CongestionGrpc/congestion",
            request_serializer=congestion__grpc__pb2.CongestionRequest.SerializeToString,  # noqa
            response_deserializer=congestion__grpc__pb2.CongestionResponse.FromString,  # noqa
        )


class CongestionGrpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def congestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CongestionGrpcServicer_to_server(servicer, server):  # noqa
    rpc_method_handlers = {
        "congestion": grpc.unary_unary_rpc_method_handler(
            servicer.congestion,
            request_deserializer=congestion__grpc__pb2.CongestionRequest.FromString,  # noqa
            response_serializer=congestion__grpc__pb2.CongestionResponse.SerializeToString,  # noqa
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "congestion_grpc.CongestionGrpc", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CongestionGrpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def congestion(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):  # noqa
        return grpc.experimental.unary_unary(
            request,
            target,
            "/congestion_grpc.CongestionGrpc/congestion",
            congestion__grpc__pb2.CongestionRequest.SerializeToString,
            congestion__grpc__pb2.CongestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
